<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[卷积神经网络代码实现]]></title>
      <url>/2017/07/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ggg.9170.gs/hexo/img/jj-mb.png" alt="&quot;jj-md&quot;"></p>
<pre><code># -*- coding: UTF-8 -*-
import tensorflow as tf
import tensorflow.examples.tutorials.mnist.input_data ad input_data
mnist = input_data.read_data_sets(&quot;data/&quot;, one_hot=True)

#训练集的image
x = tf.placeholder(tf.float32, [None, 784])
#训练集的label
y_actual = tf.palceholder(tf.float32, [None, 10])

#定义一个函数，用于初始化所有权值 w
def weight_variable(shape):
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tr.Variable(initial)

#定义一个函数，用于初始化所有的偏置值 b
def bias_variable(shape):
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

#定义一个函数，用于构建卷积层
def conv2d(x, w):
    return tf.nn.conv2d(x, w,strides=[1, 1, 1, 1], padding=&#39;SAME&#39;)

#定义一个函数，用于构建池化层
def max_pool(x, w):
    return tr.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding=&#39;SAME&#39;)

x_image = tf.reshape(x, [-1, 28, 28, 1])

#构建网络
w_conv1 = weight_variable([5, 5, 1, 32])
b_conv1 = bias_variable([32])

h_conv1 = tf.nn.relu(conv2d(x_image,w_conv1)+b_conv1)#第一个卷积层
h_pool1 = max_pool(h_conv1)#第一个池化层

w_conv2 = weight_variable([5,5,32,62])
b_conv2 = bias_variable([64])
h_conv2 = tf.nn.relu(conv2d(h_pool1,w_conv2)+b_conv2)#第二个卷积层
h_poopl2 = max_pool(h_conv2)#第二个池化层

w_fcl = weight_variable([7 * 7 * 64, 1024])
b_fcl = bias_variables([1024])
h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64]) #reshape成向量

keep_prob = tf.palceholder(&quot;float&quot;)
h_fcl_drop = tf.nn.dropout(h_fcl, keep_prob)#dropout层

w_fc2 = weight_variable([1024, 10])
b_fc2 = bias_variable([10])
y_predict = tf.nn.softmax(tf.matmul(h_fcl_drop, w_fc2) + b_fc2)#softmax层

croos_entropy = -tf.reduce_sum(y_actual * tf.log(y_predict)) #交叉熵
train_step = tf.train.GradientDescentOptimizer(1e-3).minimize(cross_entropy)#梯度下降法
correct_prediction = tf.equal(tf.argmax(y_predict, 1),tf.argmax(y_actual,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,&#39;float&#39;))#精度计算

init = tf.initializer_all_variables()

with tf.Session() as sess:
    sess.run(init)
    for i in range(2000):
        batch = mnist.train.next_batch(50)
        if i % 1000 == 0:
            train_acc =accuracy.eval(feed_dict={x: batch[0],y_yctual: batch[1],keep_prob:1.0})
            print &quot;step&quot;,i,&quot;training accuracy&quot;,train_acc
        train_step.run(feed_dic={x:batch[0],y_actual:batch[1],keep_prob;0.5})
    test_acc = accuracy.eval(feed_dict={x;mnist.test.images, y_actual:mnist,test,labels, keep_prob:1.0})
    print &quot;test accuracy&quot;,test_acc
</code></pre>]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[卷积神经网络（CNN)]]></title>
      <url>/2017/07/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN/</url>
      <content type="html"><![CDATA[<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><ul>
<li>优点：<br><br>CNN可以得出原始图像的有效表征，通过<font color="red">极少的预处理</font>，识别视觉上的规律。</li>
<li>适用领域：<br><br>  语音识别、图像识别</li>
<li>结构分类：<br><br>  特征提取层、特征映射层</li>
</ul>
<p><img src="https://ggg.9170.gs/hexo/img/jjsjwljg.png" alt="&quot;jjsjwl&quot;"><br><img src="https://ggg.9170.gs/jj-jjc.png" alt="&quot;jjc&quot;"><br><img src="https://ggg.9170.gs/hexo/img/jj-jhhs.png" alt="&quot;jhhs&quot;"><br><img src="https://ggg.9170.gs/jj-ch.png" alt="&quot;ch&quot;"><br><img src="https://ggg.9170.gs/hexo/img/jj-clj.png" alt="&quot;clj&quot;"></p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow逻辑回归代码实现]]></title>
      <url>/2017/07/03/TensorFlow%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>##TensorFlow逻辑回归代码实现</p>
<pre><code># -*- coding: UTF-8 -*-
import tensorflow as tf
#导入数据集
from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets(&quot;data/&quot;, one_hot=True)

#变量
batch_size = 100

#训练的x(image),y(label)
# x = tf.Variable() 不使用于大量数据
# y = tf.Variable() 不使用于大量数据
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])

#模型权重
#[55000, 784]* w = [55000, 10]
w = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))

#用softmax构建逻辑回归模型
pred = tf.nn.softmax(tf.matmul(x,w) + b)
#损失函数（交叉熵）
cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),1))
# 梯度下降
optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(cost)

#初始变量
init = tf.initialize_all_variables()
#加载session图
with tf.Session() as sess:
    sess.run(init)

    #开始训练
    for epoch in range(50):
        avg_cost = 0

        total_batch= int(mnist.train.num_examples/batch_size)
        for i in range(total_batch):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            sess.run(optimizer,{x: batch_xs,y: batch_ys})
            #计算平均损失
            avg_cost += sess.run(cost,{x:batch_xs,y:batch_ys}) / total_batch
        if (epoch+1) % 5 == 0:
            print &quot;avg_cost&quot;,avg_cost
    print &quot;运行完成&quot;

    #测试准确率
    correct = tf.equal(tf.argmax(pred, 1),tf.argmax(y, 1))
    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))
    print &quot;正确率&quot;,accuracy.eval({x: mnist.test.images,y: mnist.test.labels})
</code></pre>]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow逻辑回归语法]]></title>
      <url>/2017/07/03/TensorFlow%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="https://ggg.9170.gs/hexo/img/softmax.png" alt="&quot;softmax&quot;"></p>
<h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><pre><code>import tensorflow as tf
import numpy as np

#占位符，适用于不知道具体参数
x = tf.placeholder(tf.float32, shape=(4, 4))
y = tf.add(x, x)

argmax_paramter = tf.Variable([[1, 32, 44, 56],[89, 12, 90, 33],[35, 69,1,10]])

#最大列索引
argmax_0 = tf.argmax(argmax_paramter, 0)
#最大行索引
argmax_1 = tf.argmax(argmax_paramter, 1)

#平均数
reduce_0 = tf.reduce_mean(argmax_paramter, reduction_indices=0)
reduce_1 = tf.reduce_mean(argmax_paramter, raduction_indices=1)

#相等
equal_0 = tf.equal(1,2)
equal_1 = tf.equal(2, 2)

#类型转换
cast_0 = tf.cast(equal_0, tf.int32)
casr_1 = tf.cast(equal_1,tf.float32)

with tf.Session() as sess:
    init = tf.variables_all_initializer()
    sess.run(init)

    rand_array = np.random.rand(4, 4)
    print(sess.run(y, feed_dict={x: rand_array}))
</code></pre>]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线性回归使用到的TensorFlow语法]]></title>
      <url>/2017/07/03/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84TensorFlow%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>##基础语法部分</p>
<pre><code>import tensorflow as tf

#-----------准备阶段-----------
a = tf.Variable([[2,3]])
b = tf.Variable([[4],[2]])
c = tf.matmul(a,b)

print(&#39;c-------&gt;&#39;,c)

#创建用0填充的矩阵
d = tf.zeros([2,4])
#平方
e = tf.square([2])
#平均值
f = tf.reduce_mean([1,3])
#均匀分布的随机数
q = tf.random_uniform([1,10])
#------------执行阶段-----------
with tf.Session() as sess:
    #初始所有的变量
    init = tf.global_variables_initializer()
    sess.run(init)
</code></pre><p>##代码实现部分</p>
<pre><code># -*- coding: UTF-8 -*-
# 一元的线性回归模型的训练
# 1.通过训练数据推测出线性回归函数（y = w * x + b）中的w 和 b的值
# 2.通过验证数据，验证得到的函数是否符合预期

#引入tensorflow
import tensorflow as tf
#引入绘图标

#引入数据模块
import testData as td

# 1.获得训练数据
# testData
# get_train_data 获得训练数据，参数data_length(获得数据的个数)返回：二维数组[0]代表x [1]代表y
# get_validata_data 获得验证数据 参数：data_length(数据个数) 返回二维数组 二维数组[0]代表x [1]代表y

trainData = td.get_train_data(200)
trainx = [v[0] for v in trainData]
trainy = [v[1] for v in trainData]

#2.构造预测的线性回归函数 y = w * x +b
w = tf.Variable(tf.random_uniform([1]))
b = tf.Variable(tf.zeros([1]))
y = w * trainx + b

#3.判断假设函数的好坏
# 代价函数

cost = tf.reduce_mean(tf.square(y-trainy))

#4.调整假设函数
#梯度下降算法找最优解
optimizer = tf.train.GradientDescentOptimizer(0.08)
train = optimizer.minimize(cost)

with tf.Session() as sess:
    #--------初始化所有变量值--------
    init = tf.initialize_all_variables() #replaced initialize_all_variables with global_variables_initializer
    sess.run(init)
    #初始化w.b的值
    print(&quot;cost=&quot;,sess.run(cost),&quot;w=&quot;,sess.run(w),&quot;b=&quot;,sess.run(b))
    #循环运行
    for k in range(1000):
        sess.run(train)
        #输出训练好的w和b
        print(&quot;cost=&quot;,sess.run(cost),&quot;w=&quot;,sess.run(w),&quot;b=&quot;,sess.run(b))
    print(&quot;执行完成&quot;)

    #构造图形结构
</code></pre>]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow 一元线性回归]]></title>
      <url>/2017/07/03/TensorFlow%20%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlow实现一元线性回归模型"><a href="#TensorFlow实现一元线性回归模型" class="headerlink" title="TensorFlow实现一元线性回归模型"></a>TensorFlow实现一元线性回归模型</h2><p>(x y)<br><br>&nbsp;1 3<br><br>&nbsp;1 5.1<br><br>&nbsp;1 6.99<br></p>
<blockquote>
<p>y = w * x + b;</p>
</blockquote>
<h3 id="1-假设一个线性回归模型"><a href="#1-假设一个线性回归模型" class="headerlink" title="1.假设一个线性回归模型"></a>1.假设一个线性回归模型</h3><blockquote>
<p>h(x) = 3 * x + 5;</p>
</blockquote>
<h3 id="2-判断这个假设线性回归模型对不对"><a href="#2-判断这个假设线性回归模型对不对" class="headerlink" title="2.判断这个假设线性回归模型对不对"></a>2.判断这个假设线性回归模型对不对</h3><blockquote>
<p>3 * 1 + 5 = 8</p>
</blockquote>
<p>代价函数：均方差<br>（（8 - 3）的平方 + (11 - 5.1)的平方+(14 - 6.99)的平方）/ 2*3</p>
<h3 id="3-判断这个模型参数"><a href="#3-判断这个模型参数" class="headerlink" title="3.判断这个模型参数"></a>3.判断这个模型参数</h3><pre><code>h(x) = 2.8 * x + 4;
h(x) = 2.6 * x +3;
.
.
.
h(x) = 2.0 * x + 1;
</code></pre><p>求最优解算法：</p>
<p>梯度下降：</p>
<h3 id="4-得到符合要求的线性回归模型"><a href="#4-得到符合要求的线性回归模型" class="headerlink" title="4.得到符合要求的线性回归模型"></a>4.得到符合要求的线性回归模型</h3><p>h(x) = 2.0 * x + 1;</p>
<h3 id="5-用验证数据验证下训练出来的模型对不对"><a href="#5-用验证数据验证下训练出来的模型对不对" class="headerlink" title="5.用验证数据验证下训练出来的模型对不对"></a>5.用验证数据验证下训练出来的模型对不对</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.获得训练数据和验证数据（一堆（x，y）组成的训练点）</p>
<p>2.假设一个一元线性回归函数 （a = w*x +b）</p>
<p>3.判断假设函数的好坏 (代价函数)</p>
<p>4.调整假设的一元线性回归函数 (梯度下降算法 学习率)</p>
<p>5.得到最优的预测一元线性回归函数 (y = w*x +b)</p>
<p>6.根据验证数据验证函数是否符合要求</p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/07/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>/about.html</url>
      <content type="html"><![CDATA[<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p> <code>/tataki/</code></p>
<p><br><br>喜欢尝试新鲜事物</p>
<p>喜欢和有趣的人打交道</p>
<p>对二战历史有着浓厚兴趣</p>
<p>喜欢一些小众东西</p>
<p>游戏方面：</p>
<blockquote>
<ul>
<li>比如降智商的 OSU(欧屎)</li>
</ul>
</blockquote>
<p>生活方面：</p>
<blockquote>
<ul>
<li>玄学(论火电，水电，风电，核电对音质的影响)</li>
</ul>
</blockquote>
<h3 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h3><p>不喜欢一成不变的东西</p>
<p>不喜欢随波逐流</p>
<p>对Sony家的产品有特殊信仰</p>
<blockquote>
<h3 id="Make-Believe"><a href="#Make-Believe" class="headerlink" title="Make Believe"></a>Make Believe</h3></blockquote>
<p>对Google家的技术跪舔</p>
<blockquote>
<font color="gray" size="6"> 代码和网易云音乐是绝配</font>

</blockquote>
<h2 id="Find-me"><a href="#Find-me" class="headerlink" title="Find me?"></a>Find me?</h2><p><font size="4">QQ</font>:U2FsdGVkX19HY8ZQ9F3wzNDD/DxyoG2pIltnnWs66ng=</p>
<p><font size="4">Telegram</font>:Orange Tataki</p>
<p><font size="4">网易云音乐</font>:<a href="http://music.163.com/#/user/home?id=51335046" target="_blank" rel="external">KamioYuki</a></p>
<p><font size="4">email</font>:orangeyao@outlook.com</p>
<p><font size="4">QQ群</font>:531672842</p>
<p><font size="4">G猫加速</font>:<a href="https://www.ggg.moe" target="_blank" rel="external">Link</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>/about/about.html</url>
      <content type="html"><![CDATA[<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p> <code>/tataki/</code></p>
<p><br><br>喜欢尝试新鲜事物</p>
<p>喜欢和有趣的人打交道</p>
<p>对二战历史有着浓厚兴趣</p>
<p>喜欢一些小众东西</p>
<p>游戏方面：</p>
<blockquote>
<ul>
<li>比如降智商的 OSU(欧屎)</li>
</ul>
</blockquote>
<p>生活方面：</p>
<blockquote>
<ul>
<li>玄学(论火电，水电，风电，核电对音质的影响)</li>
</ul>
</blockquote>
<h3 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h3><p>不喜欢一成不变的东西</p>
<p>不喜欢随波逐流</p>
<p>对Sony家的产品有特殊信仰</p>
<blockquote>
<h3 id="Make-Believe"><a href="#Make-Believe" class="headerlink" title="Make Believe"></a>Make Believe</h3></blockquote>
<p>对Google家的技术跪舔</p>
<blockquote>
<font color="gray" size="6"> 代码和网易云音乐是绝配</font>

</blockquote>
<h2 id="Find-me"><a href="#Find-me" class="headerlink" title="Find me?"></a>Find me?</h2><p><font size="4">QQ</font>:U2FsdGVkX19HY8ZQ9F3wzNDD/DxyoG2pIltnnWs66ng=</p>
<p><font size="4">Telegram</font>:Orange Tataki</p>
<p><font size="4">网易云音乐</font>:<a href="http://music.163.com/#/user/home?id=51335046" target="_blank" rel="external">KamioYuki</a></p>
<p><font size="4">email</font>:orangeyao@outlook.com</p>
<p><font size="4">QQ群</font>:531672842</p>
<p><font size="4">G猫加速</font>:<a href="https://www.ggg.moe" target="_blank" rel="external">Link</a></p>
]]></content>
    </entry>
    
  
</search>
