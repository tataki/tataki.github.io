<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[聊天机器人制作-1]]></title>
      <url>/2017/07/22/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%88%B6%E4%BD%9C-1/</url>
      <content type="html"><![CDATA[<p>注：原文来自<a href="http://www.shareditor.com/blogshow/?blogId=74" target="_blank" rel="external">http://www.shareditor.com/blogshow/?blogId=74</a><br>细节有改动</p>
<h2 id="问句解析过程"><a href="#问句解析过程" class="headerlink" title="问句解析过程"></a>问句解析过程</h2><p>一般问句解析需要进行分词、词性标注、命名实体识别、关键词提取、句法分析以及查询问句分类等。这些事情我们从头开始做无非是重复造轮子，傻子才会这么做，人之所以为人是因为会使用工具。网络上有关中文的NLP工具有很多，介绍几个不错的：</p>
<p>第一个要数哈工大的LTP(语言技术平台)了，它可以做中文分词、词性标注、命名实体识别、依存句法分析、语义角色标注等丰富、 高效、精准的自然语言处理技术</p>
<p>第二个就是博森科技了，它除了做中文分词、词性标注、命名实体识别、依存文法之外还可以做情感分析、关键词提取、新闻分类、语义联想、时间转换、新闻摘要等，但因为是商业化的公司，除了分词和词性标注免费之外全都收费</p>
<p>第三个就是jieba分词，这个开源小工具分词和词性标注做的挺不错的，但是其他方面还欠缺一下，如果只是中文分词的需求完全可以满足</p>
<p>第四个就是中科院张华平博士的NLPIR汉语分词系统，也能支持关键词提取</p>
<p>我们优先选择NLPIR</p>
<h2 id="NLPIR使用"><a href="#NLPIR使用" class="headerlink" title="NLPIR使用"></a>NLPIR使用</h2><p>文档在<a href="http://pynlpir.readthedocs.io/en/latest/" target="_blank" rel="external">http://pynlpir.readthedocs.io/en/latest/</a></p>
<p>首先安装pynlpir库</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip <span class="keyword">install</span> pynlpir</div><div class="line">pynlpir update <span class="comment">#升级许可证</span></div></pre></td></tr></table></figure>
<p>写个小程序测试一下分词效果：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"></div><div class="line">import sys</div><div class="line">reload(sys)</div><div class="line">sys.setdefaultencoding( <span class="string">"utf-8"</span> )</div><div class="line"></div><div class="line">import pynlpir</div><div class="line"></div><div class="line">pynlpir.<span class="built_in">open</span>()</div><div class="line">s = <span class="string">'聊天机器人到底该怎么做呢？'</span></div><div class="line"><span class="keyword">segments</span> = pynlpir.<span class="keyword">segment</span>(s)</div><div class="line"><span class="keyword">for</span> <span class="keyword">segment</span> <span class="keyword">in</span> <span class="keyword">segments</span>:</div><div class="line">    print <span class="keyword">segment</span>[<span class="number">0</span>], <span class="string">'\t'</span>, <span class="keyword">segment</span>[<span class="number">1</span>]</div><div class="line"></div><div class="line">pynlpir.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
<p>执行效果如下：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">聊天     <span class="keyword">verb</span></div><div class="line">机器人     noun</div><div class="line">到底     adverb</div><div class="line">该     <span class="keyword">verb</span></div><div class="line">怎么     pronoun</div><div class="line">做     <span class="keyword">verb</span></div><div class="line">呢     modal particle</div><div class="line">？     punctuation <span class="keyword">mark</span></div></pre></td></tr></table></figure>
<p>下面我们再继续试下关键词提取效果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">key_words = pynlpir.get_key_words(s, weighted=<span class="keyword">True</span>)</div><div class="line"><span class="keyword">for</span> key_word <span class="keyword">in</span> key_words:</div><div class="line">    <span class="keyword">print</span> key_word[<span class="number">0</span>], <span class="string">'\t'</span>, key_word[<span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">聊天     <span class="number">2.0</span></div><div class="line">机器人     <span class="number">2.0</span></div><div class="line">``` </div><div class="line"></div><div class="line">从这个小程序来看，分词和关键词提取效果很好</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">下面我们再来试验一个，这一次我们把分析功能全打开，部分代码如下：</div></pre></td></tr></table></figure>
<p>s = ‘海洋是如何形成的’<br>segments = pynlpir.segment(s, pos_names=’all’)<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">执行后效果如下：</div></pre></td></tr></table></figure></p>
<p>海洋     noun<br>是     verb:verb 是<br>如何     pronoun:interrogative pronoun:predicate interrogative pronoun<br>形成     verb<br>的     particle:particle 的/底<br>海洋     2.0<br>形成     2.0<br><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="routeros">如果我们把segments在加上一个参数<span class="attribute">pos_english</span>=<span class="literal">False</span>，也就是不使用英语，那么输出就是</span></div></pre></td></tr></table></figure></p>
<p>海洋     名词<br>是     动词:动词”是”<br>如何     代词:疑问代词:谓词性疑问代词<br>形成     动词<br>的     助词:的／底<br>海洋     2.0<br>形成     2.0<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">解释一下</div><div class="line">这里的segment是切词的意思，返回的是tuple(token, pos)，其中token就是切出来的词，pos就是语言属性</div><div class="line"></div><div class="line">调用segment方法指定的pos_names参数可以是<span class="string">'all'</span>, <span class="string">'child'</span>, <span class="string">'parent'</span>，默认是parent， 表示获取该词性的最顶级词性，child表示获取该词性的最具体的信息，all表示获取该词性相关的所有词性信息，相当于从其顶级词性到该词性的一条路径</div><div class="line"></div><div class="line"></div><div class="line">词性分类表</div><div class="line">查看nlpir的源代码中的pynlpir/docs/pos_map.rst，可以看出全部词性分类及其子类别如下：</div><div class="line"></div><div class="line">```python</div><div class="line">    POS_MAP = &#123;</div><div class="line">        <span class="string">'n'</span>: (<span class="string">'名词'</span>, <span class="string">'noun'</span>, &#123;</div><div class="line">            <span class="string">'nr'</span>: (<span class="string">'人名'</span>, <span class="string">'personal name'</span>, &#123;</div><div class="line">                <span class="string">'nr1'</span>: (<span class="string">'汉语姓氏'</span>, <span class="string">'Chinese surname'</span>),</div><div class="line">                <span class="string">'nr2'</span>: (<span class="string">'汉语名字'</span>, <span class="string">'Chinese given name'</span>),</div><div class="line">                <span class="string">'nrj'</span>: (<span class="string">'日语人名'</span>, <span class="string">'Japanese personal name'</span>),</div><div class="line">                <span class="string">'nrf'</span>: (<span class="string">'音译人名'</span>, <span class="string">'transcribed personal name'</span>)</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'ns'</span>: (<span class="string">'地名'</span>, <span class="string">'toponym'</span>, &#123;</div><div class="line">                <span class="string">'nsf'</span>: (<span class="string">'音译地名'</span>, <span class="string">'transcribed toponym'</span>),</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'nt'</span>: (<span class="string">'机构团体名'</span>, <span class="string">'organization/group name'</span>),</div><div class="line">            <span class="string">'nz'</span>: (<span class="string">'其它专名'</span>, <span class="string">'other proper noun'</span>),</div><div class="line">            <span class="string">'nl'</span>: (<span class="string">'名词性惯用语'</span>, <span class="string">'noun phrase'</span>),</div><div class="line">            <span class="string">'ng'</span>: (<span class="string">'名词性语素'</span>, <span class="string">'noun morpheme'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'t'</span>: (<span class="string">'时间词'</span>, <span class="string">'time word'</span>, &#123;</div><div class="line">            <span class="string">'tg'</span>: (<span class="string">'时间词性语素'</span>, <span class="string">'time morpheme'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'s'</span>: (<span class="string">'处所词'</span>, <span class="string">'locative word'</span>),</div><div class="line">        <span class="string">'f'</span>: (<span class="string">'方位词'</span>, <span class="string">'noun of locality'</span>),</div><div class="line">        <span class="string">'v'</span>: (<span class="string">'动词'</span>, <span class="string">'verb'</span>, &#123;</div><div class="line">            <span class="string">'vd'</span>: (<span class="string">'副动词'</span>, <span class="string">'auxiliary verb'</span>),</div><div class="line">            <span class="string">'vn'</span>: (<span class="string">'名动词'</span>, <span class="string">'noun-verb'</span>),</div><div class="line">            <span class="string">'vshi'</span>: (<span class="string">'动词"是"'</span>, <span class="string">'verb 是'</span>),</div><div class="line">            <span class="string">'vyou'</span>: (<span class="string">'动词"有"'</span>, <span class="string">'verb 有'</span>),</div><div class="line">            <span class="string">'vf'</span>: (<span class="string">'趋向动词'</span>, <span class="string">'directional verb'</span>),</div><div class="line">            <span class="string">'vx'</span>: (<span class="string">'行事动词'</span>, <span class="string">'performative verb'</span>),</div><div class="line">            <span class="string">'vi'</span>: (<span class="string">'不及物动词'</span>, <span class="string">'intransitive verb'</span>),</div><div class="line">            <span class="string">'vl'</span>: (<span class="string">'动词性惯用语'</span>, <span class="string">'verb phrase'</span>),</div><div class="line">            <span class="string">'vg'</span>: (<span class="string">'动词性语素'</span>, <span class="string">'verb morpheme'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'a'</span>: (<span class="string">'形容词'</span>, <span class="string">'adjective'</span>, &#123;</div><div class="line">            <span class="string">'ad'</span>: (<span class="string">'副形词'</span>, <span class="string">'auxiliary adjective'</span>),</div><div class="line">            <span class="string">'an'</span>: (<span class="string">'名形词'</span>, <span class="string">'noun-adjective'</span>),</div><div class="line">            <span class="string">'ag'</span>: (<span class="string">'形容词性语素'</span>, <span class="string">'adjective morpheme'</span>),</div><div class="line">            <span class="string">'al'</span>: (<span class="string">'形容词性惯用语'</span>, <span class="string">'adjective phrase'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'b'</span>: (<span class="string">'区别词'</span>, <span class="string">'distinguishing word'</span>, &#123;</div><div class="line">            <span class="string">'bl'</span>: (<span class="string">'区别词性惯用语'</span>, <span class="string">'distinguishing phrase'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'z'</span>: (<span class="string">'状态词'</span>, <span class="string">'status word'</span>),</div><div class="line">       <span class="string">'r'</span>: (<span class="string">'代词'</span>, <span class="string">'pronoun'</span>, &#123;</div><div class="line">            <span class="string">'rr'</span>: (<span class="string">'人称代词'</span>, <span class="string">'personal pronoun'</span>),</div><div class="line">            <span class="string">'rz'</span>: (<span class="string">'指示代词'</span>, <span class="string">'demonstrative pronoun'</span>, &#123;</div><div class="line">                <span class="string">'rzt'</span>: (<span class="string">'时间指示代词'</span>, <span class="string">'temporal demonstrative pronoun'</span>),</div><div class="line">                <span class="string">'rzs'</span>: (<span class="string">'处所指示代词'</span>, <span class="string">'locative demonstrative pronoun'</span>),</div><div class="line">                <span class="string">'rzv'</span>: (<span class="string">'谓词性指示代词'</span>, <span class="string">'predicate demonstrative pronoun'</span>),</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'ry'</span>: (<span class="string">'疑问代词'</span>, <span class="string">'interrogative pronoun'</span>, &#123;</div><div class="line">                <span class="string">'ryt'</span>: (<span class="string">'时间疑问代词'</span>, <span class="string">'temporal interrogative pronoun'</span>),</div><div class="line">                <span class="string">'rys'</span>: (<span class="string">'处所疑问代词'</span>, <span class="string">'locative interrogative pronoun'</span>),</div><div class="line">                <span class="string">'ryv'</span>: (<span class="string">'谓词性疑问代词'</span>, <span class="string">'predicate interrogative pronoun'</span>),</div><div class="line">            &#125;),</div><div class="line">            <span class="string">'rg'</span>: (<span class="string">'代词性语素'</span>, <span class="string">'pronoun morpheme'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'m'</span>: (<span class="string">'数词'</span>, <span class="string">'numeral'</span>, &#123;</div><div class="line">            <span class="string">'mq'</span>: (<span class="string">'数量词'</span>, <span class="string">'numeral-plus-classifier compound'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'q'</span>: (<span class="string">'量词'</span>, <span class="string">'classifier'</span>, &#123;</div><div class="line">            <span class="string">'qv'</span>: (<span class="string">'动量词'</span>, <span class="string">'verbal classifier'</span>),</div><div class="line">            <span class="string">'qt'</span>: (<span class="string">'时量词'</span>, <span class="string">'temporal classifier'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'d'</span>: (<span class="string">'副词'</span>, <span class="string">'adverb'</span>),</div><div class="line">        <span class="string">'p'</span>: (<span class="string">'介词'</span>, <span class="string">'preposition'</span>, &#123;</div><div class="line">            <span class="string">'pba'</span>: (<span class="string">'介词“把”'</span>, <span class="string">'preposition 把'</span>),</div><div class="line">            <span class="string">'pbei'</span>: (<span class="string">'介词“被”'</span>, <span class="string">'preposition 被'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'c'</span>: (<span class="string">'连词'</span>, <span class="string">'conjunction'</span>, &#123;</div><div class="line">            <span class="string">'cc'</span>: (<span class="string">'并列连词'</span>, <span class="string">'coordinating conjunction'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'u'</span>: (<span class="string">'助词'</span>, <span class="string">'particle'</span>, &#123;</div><div class="line">            <span class="string">'uzhe'</span>: (<span class="string">'着'</span>, <span class="string">'particle 着'</span>),</div><div class="line">            <span class="string">'ule'</span>: (<span class="string">'了／喽'</span>, <span class="string">'particle 了/喽'</span>),</div><div class="line">            <span class="string">'uguo'</span>: (<span class="string">'过'</span>, <span class="string">'particle 过'</span>),</div><div class="line">            <span class="string">'ude1'</span>: (<span class="string">'的／底'</span>, <span class="string">'particle 的/底'</span>),</div><div class="line">            <span class="string">'ude2'</span>: (<span class="string">'地'</span>, <span class="string">'particle 地'</span>),</div><div class="line">            <span class="string">'ude3'</span>: (<span class="string">'得'</span>, <span class="string">'particle 得'</span>),</div><div class="line">            <span class="string">'usuo'</span>: (<span class="string">'所'</span>, <span class="string">'particle 所'</span>),</div><div class="line">            <span class="string">'udeng'</span>: (<span class="string">'等／等等／云云'</span>, <span class="string">'particle 等/等等/云云'</span>),</div><div class="line">            <span class="string">'uyy'</span>: (<span class="string">'一样／一般／似的／般'</span>, <span class="string">'particle 一样/一般/似的/般'</span>),</div><div class="line">            <span class="string">'udh'</span>: (<span class="string">'的话'</span>, <span class="string">'particle 的话'</span>),</div><div class="line">            <span class="string">'uls'</span>: (<span class="string">'来讲／来说／而言／说来'</span>, <span class="string">'particle 来讲/来说/而言/说来'</span>),</div><div class="line">            <span class="string">'uzhi'</span>: (<span class="string">'之'</span>, <span class="string">'particle 之'</span>),</div><div class="line">            <span class="string">'ulian'</span>: (<span class="string">'连'</span>, <span class="string">'particle 连'</span>),</div><div class="line">        &#125;),</div><div class="line">       <span class="string">'e'</span>: (<span class="string">'叹词'</span>, <span class="string">'interjection'</span>),</div><div class="line">        <span class="string">'y'</span>: (<span class="string">'语气词'</span>, <span class="string">'modal particle'</span>),</div><div class="line">        <span class="string">'o'</span>: (<span class="string">'拟声词'</span>, <span class="string">'onomatopoeia'</span>),</div><div class="line">        <span class="string">'h'</span>: (<span class="string">'前缀'</span>, <span class="string">'prefix'</span>),</div><div class="line">        <span class="string">'k'</span>: (<span class="string">'后缀'</span> <span class="string">'suffix'</span>),</div><div class="line">        <span class="string">'x'</span>: (<span class="string">'字符串'</span>, <span class="string">'string'</span>, &#123;</div><div class="line">            <span class="string">'xe'</span>: (<span class="string">'Email字符串'</span>, <span class="string">'email address'</span>),</div><div class="line">            <span class="string">'xs'</span>: (<span class="string">'微博会话分隔符'</span>, <span class="string">'hashtag'</span>),</div><div class="line">            <span class="string">'xm'</span>: (<span class="string">'表情符合'</span>, <span class="string">'emoticon'</span>),</div><div class="line">            <span class="string">'xu'</span>: (<span class="string">'网址URL'</span>, <span class="string">'URL'</span>),</div><div class="line">            <span class="string">'xx'</span>: (<span class="string">'非语素字'</span>, <span class="string">'non-morpheme character'</span>),</div><div class="line">        &#125;),</div><div class="line">        <span class="string">'w'</span>: (<span class="string">'标点符号'</span>, <span class="string">'punctuation mark'</span>, &#123;</div><div class="line">            <span class="string">'wkz'</span>: (<span class="string">'左括号'</span>, <span class="string">'left parenthesis/bracket'</span>),</div><div class="line">            <span class="string">'wky'</span>: (<span class="string">'右括号'</span>, <span class="string">'right parenthesis/bracket'</span>),</div><div class="line">            <span class="string">'wyz'</span>: (<span class="string">'左引号'</span>, <span class="string">'left quotation mark'</span>),</div><div class="line">            <span class="string">'wyy'</span>: (<span class="string">'右引号'</span>, <span class="string">'right quotation mark'</span>),</div><div class="line">            <span class="string">'wj'</span>: (<span class="string">'句号'</span>, <span class="string">'period'</span>),</div><div class="line">            <span class="string">'ww'</span>: (<span class="string">'问号'</span>, <span class="string">'question mark'</span>),</div><div class="line">            <span class="string">'wt'</span>: (<span class="string">'叹号'</span>, <span class="string">'exclamation mark'</span>),</div><div class="line">            <span class="string">'wd'</span>: (<span class="string">'逗号'</span>, <span class="string">'comma'</span>),</div><div class="line">            <span class="string">'wf'</span>: (<span class="string">'分号'</span>, <span class="string">'semicolon'</span>),</div><div class="line">            <span class="string">'wn'</span>: (<span class="string">'顿号'</span>, <span class="string">'enumeration comma'</span>),</div><div class="line">            <span class="string">'wm'</span>: (<span class="string">'冒号'</span>, <span class="string">'colon'</span>),</div><div class="line">            <span class="string">'ws'</span>: (<span class="string">'省略号'</span>, <span class="string">'ellipsis'</span>),</div><div class="line">            <span class="string">'wp'</span>: (<span class="string">'破折号'</span>, <span class="string">'dash'</span>),</div><div class="line">            <span class="string">'wb'</span>: (<span class="string">'百分号千分号'</span>, <span class="string">'percent/per mille sign'</span>),</div><div class="line">            <span class="string">'wh'</span>: (<span class="string">'单位符号'</span>, <span class="string">'unit of measure sign'</span>),</div><div class="line">        &#125;),</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>好，这回我们一下子完成了分词、词性标注、关键词提取。命名实体识别、句法分析以及查询问句分类我们之后再研究</p>
]]></content>
      
        <categories>
            
            <category> chatbot </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chatbot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows 下配置TensorFlow GPU版]]></title>
      <url>/2017/07/20/windows-%E4%B8%8B%E9%85%8D%E7%BD%AEtensorflow-GPU%E7%89%88/</url>
      <content type="html"><![CDATA[<h2 id="1-安装Anaconda"><a href="#1-安装Anaconda" class="headerlink" title="1.安装Anaconda"></a>1.安装Anaconda</h2><p><a href="https://www.continuum.io/downloads" target="_blank" rel="external">官网下载地址</a></p>
<p><img src="http://i.imgur.com/qRZeZdC.jpg" alt=""></p>
<p>我默认全打勾</p>
<p>导入conda清华源，加快下载速度</p>
<blockquote>
<p>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a></p>
<p>conda config –set show_channel_urls yes</p>
</blockquote>
<h2 id="2-安装CUDA和cuDDN（坑）"><a href="#2-安装CUDA和cuDDN（坑）" class="headerlink" title="2.安装CUDA和cuDDN（坑）"></a>2.安装CUDA和cuDDN（坑）</h2><p>CUDA下载地址 <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">https://developer.nvidia.com/cuda-downloads</a><br>cuDDN下载地址 <a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="external">https://developer.nvidia.com/rdp/cudnn-download</a> （注：必须为cuDDB5.1 for CUDA8!）</p>
<p>CUDA正常安装即可，将解压的cuDDN中的bin，include，lib中文件对应放置到CUDA的<figure class="highlight plain"><figcaption><span>Files\NVIDIA GPU Computing Toolkit\CUDA\v8.0```中的bin，include，lib中，可以避免很多麻烦！</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 3.安装tensorflow</div><div class="line">更换pip源：</div><div class="line">windows</div><div class="line"></div><div class="line">在 c:\user\username\pip\pip.ini中加入(没有自行创建)</div></pre></td></tr></table></figure></p>
<p>[global]<br>index-url = <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="external">https://pypi.doubanio.com/simple/</a><br>[install]<br>trusted-host=pypi.doubanio.com<br>disable-pip-version-check = true<br>timeout = 6000<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">linux（ubuntu）</div></pre></td></tr></table></figure></p>
<p>cd $HOME<br>mkdir .pip<br>cd .pip<br>sudo vim pip.conf  </p>
<p>在里面添加<br>[global]<br>index-url = <a href="https://pypi.doubanio.com/simple/" target="_blank" rel="external">https://pypi.doubanio.com/simple/</a><br>[install]<br>trusted-host=pypi.doubanio.com<br>disable-pip-version-check = true<br>timeout = 6000<br>保存即可<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在cmd中输入（也可在anaconda prompt）：</div><div class="line">&gt; conda create -n tensorflow <span class="keyword">python</span>=<span class="number">3.5</span></div><div class="line"></div><div class="line">在cmd中使用activate tensorflow进入环境，输入</div><div class="line">&gt; \# <span class="keyword">python</span> </div><div class="line"></div><div class="line">确认为<span class="number">3.5</span>版本</div><div class="line"></div><div class="line">使用命令安装GPU版本tensorflow</div><div class="line">&gt;pip install tensorflow-gpu</div><div class="line"></div><div class="line">## <span class="number">4</span>.测试程序</div><div class="line"></div><div class="line">```<span class="keyword">python</span></div><div class="line">import tensorflow <span class="keyword">as</span> <span class="keyword">tf</span></div><div class="line">hello = <span class="keyword">tf</span>.constant(<span class="string">'Hello, TensorFlow!'</span>)</div><div class="line">sess = <span class="keyword">tf</span>.Session()</div><div class="line"><span class="keyword">print</span>(sess.run(hello))</div><div class="line">Hello, TensorFlow!</div><div class="line"><span class="keyword">a</span> = <span class="keyword">tf</span>.constant(<span class="number">10</span>)</div><div class="line"><span class="keyword">b</span> = <span class="keyword">tf</span>.constant(<span class="number">32</span>)</div><div class="line"><span class="keyword">print</span>(sess.run(<span class="keyword">a</span> + <span class="keyword">b</span>))</div></pre></td></tr></table></figure></p>
<p>到此安装完毕!</p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决data too long for column 'title' at row 1]]></title>
      <url>/2017/07/19/%E8%A7%A3%E5%86%B3data-too-long-for-column-title-at-row-1/</url>
      <content type="html"><![CDATA[<h1 id="问题概述"><a href="#问题概述" class="headerlink" title="问题概述"></a>问题概述</h1><p>写入数据库时报错</p>
<blockquote>
<p>data too long for column ‘title’ at row 1</p>
</blockquote>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>百度，google下这问题回答真是五花八门。于是一行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alter table info modify column title varchar(<span class="number">255</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pymysql 转义处理]]></title>
      <url>/2017/07/19/pymysql-%E8%BD%AC%E4%B9%89%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>写爬虫时遇到了字符串中同时含有单双引号，在往数据库中写数据时出现语法错误</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>查阅文档后发现pymysql有个<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 代码实例</div><div class="line"></div><div class="line">```python</div><div class="line">db = pymysql(&quot;localhost&quot;,&quot;user&quot;,&quot;password&quot;,charset=&quot;utf8&quot;)</div><div class="line">cursor = db.cursor()</div><div class="line">exp = db.escape(str)</div><div class="line">sql = &quot;... where id = %s&quot; % exp #%s无需引号</div><div class="line">with db.cursor() as cursor:</div><div class="line">    try:</div><div class="line">        cursor.execute(sql)</div><div class="line">        db.commit()</div><div class="line">    except Exception as e:</div><div class="line">        print(e)</div><div class="line">        db.rollback()</div><div class="line">db.close()</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python bt转磁力]]></title>
      <url>/2017/07/18/python-bt%E8%BD%AC%E7%A3%81%E5%8A%9B/</url>
      <content type="html"><![CDATA[<h2 id="Python将BT种子文件转换为磁力链的两种方法"><a href="#Python将BT种子文件转换为磁力链的两种方法" class="headerlink" title="Python将BT种子文件转换为磁力链的两种方法"></a>Python将BT种子文件转换为磁力链的两种方法</h2><p>BT种子文件相对磁力链来说存储不方便，而且在网站上存放BT文件容易引起版权纠纷，而磁力链相对来说则风险小一些。而且很多论坛或者网站限制了文件上传的类型，分享一个BT种子还需要改文件后缀或者压缩一次，其他人需要下载时候还要额外多一步下载种子的操作。</p>
<p>所以将BT种子转换为占用空间更小，分享更方便的磁力链还是有挺大好处的。</p>
<p>首先一个方案是使用bencode这个插件，通过pip方式安装或者自行下载源文件<a href="https://pypi.python.org/pypi/bencode/1.0通过python" target="_blank" rel="external">https://pypi.python.org/pypi/bencode/1.0通过python</a> setup.py install方式安装均可。</p>
<p>相应的将BT种子转换为磁力链代码为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> bencode, hashlib, base64, urllib</div><div class="line">torrent = open(<span class="string">'ubuntu-12.04.2-server-amd64.iso.torrent'</span>, <span class="string">'rb'</span>).read()</div><div class="line"></div><div class="line">metadata = bencode.bdecode(torrent)</div><div class="line"></div><div class="line">hashcontents = bencode.bencode(metadata[<span class="string">'info'</span>])</div><div class="line"></div><div class="line">digest = hashlib.sha1(hashcontents).digest()</div><div class="line"></div><div class="line">b32hash = base64.b32encode(digest)</div><div class="line"></div><div class="line">params = &#123;<span class="string">'xt'</span>: <span class="string">'urn:btih:%s'</span> % b32hash,</div><div class="line"></div><div class="line">           <span class="string">'dn'</span>: metadata[<span class="string">'info'</span>][<span class="string">'name'</span>],</div><div class="line"></div><div class="line">           <span class="string">'tr'</span>: metadata[<span class="string">'announce'</span>],</div><div class="line"></div><div class="line">           <span class="string">'xl'</span>: metadata[<span class="string">'info'</span>][<span class="string">'length'</span>]&#125;</div><div class="line"></div><div class="line">paramstr = urllib.urlencode(params)</div><div class="line"></div><div class="line">magneturi = <span class="string">'magnet:?%s'</span> % paramstr</div><div class="line"></div><div class="line"><span class="keyword">print</span> magneturi</div></pre></td></tr></table></figure>
<p>还有另外一个效率相对较高，而且更方便的方案是安装libtorrent，在Debian只需要</p>
<blockquote>
<p>apt-get install python-libtorrent即可</p>
</blockquote>
<p>对应转换磁力链的代码为：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> libtorrent <span class="keyword">as</span> bt</div><div class="line">info = bt.torrent_info(<span class="string">'test.torrent'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">"magnet:?xt=urn:btih:%s&amp;dn=%s"</span> % (info.info_hash(), info.name())</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[e-hentai爬虫(基础)]]></title>
      <url>/2017/07/18/e-hentai%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>使用了BeautifulSoup，re和urllib模块</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'Orange'</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, parse</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span><span class="params">(object)</span>:</span></div><div class="line">    time = <span class="string">''</span></div><div class="line">    img_url = <span class="string">''</span></div><div class="line">    tittle = <span class="string">''</span></div><div class="line">    down = <span class="string">''</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, time, img_url, tittle, down)</span> -&gt; <span class="keyword">None</span>:</span></div><div class="line">        self.time = time</div><div class="line">        self.img_url = img_url</div><div class="line">        self.tittle = tittle</div><div class="line">        self.down = down</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPages</span><span class="params">(html)</span>:</span></div><div class="line">    <span class="keyword">return</span> re.findall(<span class="string">r'onclick="return false"&gt;(\d+)&lt;/a&gt;'</span>, html)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span><span class="params">(pages, key)</span>:</span></div><div class="line">    data = &#123;</div><div class="line">        <span class="string">'page'</span>: pages,</div><div class="line">        <span class="string">'f_doujinshi'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_manga'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_artistcg'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_gamecg'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_western'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_non-h'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_imageset'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_cosplay'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_asianporn'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_misc'</span>: <span class="string">'on'</span>,</div><div class="line">        <span class="string">'f_search'</span>: key,</div><div class="line">        <span class="string">'f_apply'</span>: <span class="string">'Apply Filter'</span></div><div class="line">    &#125;</div><div class="line">    url_parame = parse.urlencode(data)</div><div class="line">    url = <span class="string">"https://e-hentai.org/?"</span></div><div class="line">    url_all = url+url_parame</div><div class="line">    <span class="keyword">return</span> url_all</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gethtml</span><span class="params">(url)</span>:</span></div><div class="line">    req = request.Request(url)</div><div class="line">    req.add_header(<span class="string">'User-Agent'</span>, <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'</span>)</div><div class="line">    <span class="keyword">with</span> request.urlopen(req) <span class="keyword">as</span> f:</div><div class="line">        html = f.read().decode(<span class="string">'utf-8'</span>)</div><div class="line">    <span class="keyword">return</span> html</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getDown</span><span class="params">(url)</span>:</span></div><div class="line">    html = gethtml(url)</div><div class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">return</span> soup.find_all(href=re.compile(<span class="string">r'https://ehtracker.org/get/'</span>))[<span class="number">0</span>][<span class="string">'href'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getItems</span><span class="params">(html)</span>:</span></div><div class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</div><div class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find_all(<span class="string">'tr'</span>,class_=[<span class="string">'gtr0'</span>,<span class="string">'gtr1'</span>]):</div><div class="line">        time = tr.find_all(<span class="string">'td'</span>,&#123;<span class="string">'style'</span>:<span class="string">"white-space:nowrap"</span>&#125;)[<span class="number">0</span>].string</div><div class="line">        content = tr.find_all(class_=<span class="string">'it2'</span>)[<span class="number">0</span>].string</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> content:</div><div class="line">            img_url = tr.find_all(<span class="string">'img'</span>)[<span class="number">1</span>][<span class="string">'src'</span>]</div><div class="line">            tittle = tr.find_all(<span class="string">'img'</span>)[<span class="number">1</span>][<span class="string">'alt'</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            mix = re.split(<span class="string">r'~'</span>, content)</div><div class="line">            img_url = <span class="string">'https://ehgt.org/'</span>+ mix[<span class="number">2</span>]</div><div class="line">            tittle = mix[<span class="number">3</span>]</div><div class="line">        <span class="keyword">if</span> tr.find_all(href=re.compile(<span class="string">r'https://e-hentai.org/gallerytorrents.php'</span>)):</div><div class="line">            down = getDown(tr.find_all(href=re.compile(<span class="string">r'https://e-hentai.org/gallerytorrents.php'</span>))[<span class="number">0</span>][<span class="string">'href'</span>])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            down = <span class="string">'em'</span></div><div class="line">        item = Item(time, img_url, tittle, down)</div><div class="line">        print(time, img_url, tittle, down)</div><div class="line">    <span class="keyword">return</span> item</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(key)</span>:</span></div><div class="line">    url = get_url(<span class="number">0</span>, key)</div><div class="line">    html = gethtml(url)</div><div class="line">    pages = getPages(html)[<span class="number">-2</span>]</div><div class="line">    items = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(pages)):</div><div class="line">        url = get_url(i, key)</div><div class="line">        html = gethtml(url)</div><div class="line">        items.append(getItems(html))</div><div class="line">    print(items)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="comment"># key = input('输入搜索关键字(english):')</span></div><div class="line">    key = <span class="string">'chinese'</span></div><div class="line">    init(key)</div></pre></td></tr></table></figure>
<p>只有基本功能，包括图片，标题，时间，bt下载连接，效果如下</p>
<p><img src="https://ggg.9170.gs/paehentai.png" alt="hentai"></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python e-hentai 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win10系统 L2TP连接尝试失败:因为安全层在初始化与远程计算机的协商时遇到了一个处理错误]]></title>
      <url>/2017/07/16/win10%E7%B3%BB%E7%BB%9F-L2TP%E8%BF%9E%E6%8E%A5%E5%B0%9D%E8%AF%95%E5%A4%B1%E8%B4%A5-%E5%9B%A0%E4%B8%BA%E5%AE%89%E5%85%A8%E5%B1%82%E5%9C%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%BF%9C%E7%A8%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8D%8F%E5%95%86%E6%97%B6%E9%81%87%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%A4%84%E7%90%86%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h2 id="1-确保IPsec-Policy-Agent服务已启动"><a href="#1-确保IPsec-Policy-Agent服务已启动" class="headerlink" title="1.确保IPsec Policy Agent服务已启动"></a>1.确保IPsec Policy Agent服务已启动</h2><h2 id="2-确保路由和远程访问（Routing-and-Remote-Access）和远程访问连接管理器服务（Remote-Access-Connection-Manager）启动"><a href="#2-确保路由和远程访问（Routing-and-Remote-Access）和远程访问连接管理器服务（Remote-Access-Connection-Manager）启动" class="headerlink" title="2.确保路由和远程访问（Routing and Remote Access）和远程访问连接管理器服务（Remote Access Connection Manager）启动"></a>2.确保路由和远程访问（Routing and Remote Access）和远程访问连接管理器服务（Remote Access Connection Manager）启动</h2><h2 id="3-注册表添加-ProhibitIpSec-注册表项"><a href="#3-注册表添加-ProhibitIpSec-注册表项" class="headerlink" title="3.注册表添加 ProhibitIpSec 注册表项"></a>3.注册表添加 ProhibitIpSec 注册表项</h2><blockquote>
<ul>
<li>注册表路径HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Rasman\Parameters</li>
<li>创建ProhibitIpSec注册表项，选择DWORD类型并将其设置为 1 的值</li>
</ul>
</blockquote>
<h2 id="4-注册表添加-AllowL2TPWeakCrypto-注册表项"><a href="#4-注册表添加-AllowL2TPWeakCrypto-注册表项" class="headerlink" title="4.注册表添加 AllowL2TPWeakCrypto 注册表项"></a>4.注册表添加 AllowL2TPWeakCrypto 注册表项</h2><blockquote>
<ul>
<li>注册表路径HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Rasman\Parameters</li>
<li>创建 AllowL2TPWeakCrypto 注册表项，选择DWORD类型并将其设置为 1 的值</li>
</ul>
</blockquote>
<h2 id="5-重启计算机"><a href="#5-重启计算机" class="headerlink" title="5.重启计算机"></a>5.重启计算机</h2>]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> win l2tp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[7月期待的新番]]></title>
      <url>/2017/07/15/7%E6%9C%88%E6%9C%9F%E5%BE%85%E7%9A%84%E6%96%B0%E7%95%AA/</url>
      <content type="html"><![CDATA[<h2 id="这里总结下7月期待的新番"><a href="#这里总结下7月期待的新番" class="headerlink" title="这里总结下7月期待的新番"></a>这里总结下7月期待的新番</h2>]]></content>
      
        <categories>
            
            <category> Anime </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 新番 7月 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 分布式进程设计]]></title>
      <url>/2017/07/13/python-%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%9B%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>在Thread和Process中，应当优选Process，因为Process更稳定，而且，Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上。</p>
<p>Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。由于managers模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p>
<p>task_master.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> random, time, queue</div><div class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BasesManager</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#发送任务队列:</span></div><div class="line">task_queue = queue.Queue()</div><div class="line"><span class="comment">#接收结果队列</span></div><div class="line">result_queue = queue.Queue()</div><div class="line"></div><div class="line"><span class="comment">#从BaseManager继承QueueManager：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line">    </div><div class="line"><span class="comment">#把两个Queue都注册到网络上，callable参数关联Queue对象：</span></div><div class="line">QueueManager.register(<span class="string">'get_task_queue'</span>, callable=<span class="keyword">lambda</span>: task_queue)</div><div class="line">QueueManager.register(<span class="string">'get_result_queue'</span>,callable=<span class="keyword">lambda</span>; result_queue)</div><div class="line"><span class="comment">#绑定端口5000，验证码abc</span></div><div class="line">manager = QueueManager(address=(<span class="string">''</span>,<span class="number">5000</span>), authkey=<span class="string">b'abc'</span>)</div><div class="line"><span class="comment">#启动queue</span></div><div class="line">manager.start()</div><div class="line"><span class="comment">#获得通过网络访问的queue对象：</span></div><div class="line">task = manager.get_task_queue()</div><div class="line">result= manager.get_result_queue()</div><div class="line"><span class="comment">#放几个任务进去：</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    n = random.randint(<span class="number">0</span>, <span class="number">10000</span>)</div><div class="line">    print(<span class="string">'put task %d...'</span> % n)</div><div class="line">    task.put(n)</div><div class="line"><span class="comment">#从result列队读取结果：</span></div><div class="line">print(<span class="string">'Try get results...'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    r = result.get(timeout=<span class="number">10</span>)</div><div class="line">    print(<span class="string">'Result: %s'</span> % r)</div><div class="line"><span class="comment">#关闭</span></div><div class="line">manager.shutdown()</div><div class="line">print(<span class="string">'master exit.'</span>)</div></pre></td></tr></table></figure>
<p>task_worker.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time, sys, queue</div><div class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</div><div class="line"></div><div class="line"><span class="comment">#创建类似QueueManager：</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span><span class="params">(BaseManager)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment">#由于这个QueueManager只从网上获取Queue，所以注册时只提供名字：</span></div><div class="line">QueueManager.register(<span class="string">'get_task_queue'</span>)</div><div class="line">QueueManager.register(<span class="string">'get_result_queue'</span>)</div><div class="line"></div><div class="line"><span class="comment">#连接到服务器，也就是运行task_master的机器</span></div><div class="line">server_addr = <span class="string">'127.0.0.1'</span></div><div class="line">print(<span class="string">'Connect to server %s...'</span> % server_addr)</div><div class="line"><span class="comment">#端口和验证码注意保持与task_Master设置一致</span></div><div class="line">m = QueueManager(address=(server_addr,<span class="number">5000</span>),authkey = <span class="string">b'abc'</span>)</div><div class="line"><span class="comment">#连接网络</span></div><div class="line">m.connect()</div><div class="line"><span class="comment">#取得queue的对象</span></div><div class="line">task  = m.get_task_queue()</div><div class="line">result = m.get_result_queue()</div><div class="line"><span class="comment">#从task对联获取任务，写入result队列：</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        n = task.get(timeout = <span class="number">1</span>)</div><div class="line">        print(<span class="string">'run task %d * %d ...'</span> % (n,n))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        result.put(r)</div><div class="line">    <span class="keyword">except</span> Queue.Empty:</div><div class="line">        print(<span class="string">'task queue is empty.'</span>)</div><div class="line"><span class="comment">#处理结果</span></div><div class="line">print(<span class="string">'worker exit.'</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 多线程]]></title>
      <url>/2017/07/13/python-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p>
<p>我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。</p>
<p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持，Python也不例外，并且，Python的线程是真正的Posix Thread，而不是模拟出来的线程。</p>
<p>Python的标准库提供了两个模块：_thread和threading，_thread是低级模块，threading是高级模块，对_thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。</p>
<p>多线程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 新线程执行的代码:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">        n = n + <span class="number">1</span></div><div class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().name, n))</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div><div class="line"></div><div class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().name)</div><div class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</div><div class="line">t.start()</div><div class="line">t.join()</div><div class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().name)</div></pre></td></tr></table></figure></p>
<p>线程锁<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- conding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time, threading</div><div class="line"></div><div class="line"><span class="comment"># 假定银行存款</span></div><div class="line">balance = <span class="number">0</span></div><div class="line">lock = threading.lock()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment">#先存后取，合应该为0</span></div><div class="line">    <span class="keyword">global</span> blance</div><div class="line">    balance = blance + n</div><div class="line">    balance = balance - n</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</div><div class="line">    <span class="comment">#获得取锁</span></div><div class="line">    lock.acquire()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment">#放心改吧：</span></div><div class="line">        change_it(n)</div><div class="line">    finallu:</div><div class="line">        <span class="comment">#释放锁</span></div><div class="line">        lock.release()</div><div class="line">        </div><div class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</div><div class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</div><div class="line">t1.start()</div><div class="line">t2.start()</div><div class="line">t1.join()</div><div class="line">t2.join()</div><div class="line">print(balance)</div></pre></td></tr></table></figure></p>
<p>使用线程锁后效果如同单线程工作，无法发挥单线程实力</p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[神经网络模型的保存和读取]]></title>
      <url>/2017/07/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BF%9D%E5%AD%98%E5%92%8C%E8%AF%BB%E5%8F%96/</url>
      <content type="html"><![CDATA[<p>简略过程保持</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">mode_path = <span class="string">"save/model.ckpt"</span></div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line"><span class="comment">#saver 保存模型</span></div><div class="line">saver = tf.train.Saver()</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line"><span class="comment">#保持模型的权重和偏移量</span></div><div class="line">save_path = saver.save(sess, model_path)</div></pre></td></tr></table></figure>
<p>读取模型</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">"第二个session"</span></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    </div><div class="line">    load_path = saver.restore(sess, model_path<span class="comment">###例如 ./save/cnn_train.model-900###)</span></div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">        ...</div><div class="line">        ...</div><div class="line">        ...</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[循环神经网络（RNN)的代码实现]]></title>
      <url>/2017/07/05/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88RNN-%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> tensorflow.contrib <span class="keyword">as</span> rnn <span class="comment">#引入RNN</span></div><div class="line">form tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">batch_size = <span class="number">128</span> <span class="comment">#定义参数</span></div><div class="line"></div><div class="line"><span class="comment">#定义训练数据</span></div><div class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, <span class="number">28</span>, <span class="number">28</span>])</div><div class="line">y = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, <span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#定义w和b</span></div><div class="line">weights = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([<span class="number">128</span>, <span class="number">10</span>]))&#125;</div><div class="line">biases = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([<span class="number">10</span>]))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">RNN</span><span class="params">(x, weights, biases)</span>:</span></div><div class="line">    <span class="comment">#按照RNN的方式处理输入层</span></div><div class="line">    x = tf.unstack(x, <span class="number">28</span>, <span class="number">1</span>)</div><div class="line">    <span class="comment">#lstm层</span></div><div class="line">    <span class="comment">#forget_bias (默认为1)到遗忘门的偏置，为了减少在开始训练时遗忘的规模</span></div><div class="line">    lstm_cell = rnn.BasicLSTMCell(<span class="number">128</span>, forget_bias=<span class="number">1.0</span>)</div><div class="line">    <span class="comment">#获得lstm层的输出</span></div><div class="line">    outputs, states = rnn.static_rnn(lstm_cell, x, dtype=tf.float32)</div><div class="line">    <span class="comment">#得到最后一层的输出</span></div><div class="line">    <span class="keyword">return</span> rf.matmul(outputs[<span class="number">-1</span>], weights[<span class="string">'out'</span>])+biases[<span class="string">'out'</span>]</div><div class="line">    </div><div class="line"><span class="comment">#预测值</span></div><div class="line">pred = RNN(x, weights,biases)</div><div class="line"></div><div class="line"><span class="comment">#定义代价函数和最优算法</span></div><div class="line"></div><div class="line"><span class="comment">#寻找全局最优点的优化算法，引入了二次方梯度矫正</span></div><div class="line"><span class="comment">#AdamOptimizer 不容易陷于局部优点，速度更快</span></div><div class="line">cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pre, labels=y))</div><div class="line">optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.0001</span>).mnimizer(cost)</div><div class="line"></div><div class="line"><span class="comment">#结果对比</span></div><div class="line">correct_pred = tf.wqual(tf.argmax(pred, <span class="number">1</span>),tf.argmax(y, <span class="number">1</span>))</div><div class="line"><span class="comment">#求正确率</span></div><div class="line">accuracy = tf.reduce_mean(tf.case(corrext_pred, tf.float32))</div><div class="line"></div><div class="line"><span class="comment">#初始化所有参数</span></div><div class="line">init = tf.initializer_all_variables()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line">    step = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">while</span> step * batch_size &lt; <span class="number">100000</span>:</div><div class="line">        batch_x, batch_y = mnist.train.next_batch(batch_size)</div><div class="line">        batch_x = batch_x.reshape((batch_size,<span class="number">28</span>,<span class="number">28</span>))</div><div class="line">        sess.run(optimizer, feed_dict=&#123;x: batch_x,y:batch_y&#125;)</div><div class="line">        <span class="keyword">if</span> step % <span class="number">10</span> == <span class="number">0</span>:</div><div class="line">            acc = sess.run(accuracy, feed_sict=&#123;x: batch_x,y:batch_y&#125;)</div><div class="line">            loss = sess.run(cost, feed_dict=&#123;x: batch_x, y:batch_y&#125;)</div><div class="line">            <span class="keyword">print</span> <span class="string">"iter"</span> + str(step * batch_size) + <span class="string">",minibatch loss ="</span>+ loss + acc</div><div class="line">        step += <span class="number">1</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"optimization finished"</span></div><div class="line">    <span class="comment">#数据验证</span></div><div class="line">    test_len = <span class="number">128</span></div><div class="line">    test_data = mnist.test.images[:test_len].reshape((<span class="number">-1</span>,<span class="number">28</span>,<span class="number">28</span>))</div><div class="line">    test_label = mnist.test.labels[:test_len]</div><div class="line">    <span class="keyword">print</span> <span class="string">"testing accuracy"</span>+sess.run(accuracy, feed_dict=&#123;x: test_data,y: test_label&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow RNN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛的高级使用]]></title>
      <url>/2017/07/05/%E4%B8%83%E7%89%9B%E7%9A%84%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>mark下链接<a href="https://developer.qiniu.com/dora" target="_blank" rel="external">Link</a></p>
<p>可对七牛缓冲资源进行高级操作，比如图片的缩放，裁剪和变形，还有对于文件，音频的高级处理等等</p>
]]></content>
      
        <categories>
            
            <category> 实用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 七牛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mac下配合Mweb优雅地使用Hexo]]></title>
      <url>/2017/07/05/mac%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8Hexo/</url>
      <content type="html"><![CDATA[<p>陪着好Hexo后最头痛的还是关于使用markdown书写博文，之前博主都是使用网页版七牛做图床，手动上传图片再配合MacDown编辑文章(也有人推荐mou，但在10.12.5下有兼容问题)，后在apple store中找到一款图床神器ipic，收费软件，顺藤摸瓜发现在v2上原作者开源了这软件的早期版本<a href="https://github.com/chenxtdo/UPImageMacApp" target="_blank" rel="external">UPImageMacApp</a>还是挺好用的，上传好图片后直接将markdown格式存入剪切板。但这次的主角是Mweb，一款markdown神器。</p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul>
<li><p>使用term命令 hexo new “文章名” 生成编辑模板</p>
</li>
<li><p>Mweb中配置好七牛图床</p>
</li>
<li><p>打开Mweb，使用快捷键command+e切换到外边编辑模式</p>
</li>
<li><p>将hexo的_post/目录添加到Mweb的FOLDERS中</p>
</li>
</ul>
<p>这样一来每次新new出的文章，都可在Mweb中直接编辑。<br><strong>重要</strong></p>
<ul>
<li>在编辑完成后，点击窗口右上方的</li>
</ul>
<p><img src="https://ggg.9170.gs/2017-07-05-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-07-05%20%E4%B8%8B%E5%8D%888.28.12.png?imageMogr2/thumbnail/!50p" alt="屏幕快照1">将本地图片上传至图床，这将会把编辑文档中的本地图片全上传到对应图床地址</p>
<ul>
<li>Mweb可实现将本地图片拖拽到编辑文档对于位置，自动上传至图床功能（超好用）！ </li>
</ul>
<blockquote>
<p>使用七牛文件不可存在中文</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 实用 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RNN的代码实现]]></title>
      <url>/2017/07/05/RNN%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tensorflow.contrib <span class="keyword">import</span> rnn</div><div class="line">form tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#定义参数</span></div><div class="line">batch_size = <span class="number">128</span></div><div class="line"></div><div class="line"><span class="comment">#定义训练数据</span></div><div class="line">x = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>, <span class="number">28</span>,<span class="number">28</span>])</div><div class="line">y = tf.placeholder(<span class="string">"float"</span>, [<span class="keyword">None</span>,<span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#定义w和b</span></div><div class="line">wights = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([<span class="number">128</span>, <span class="number">10</span>]))&#125;</div><div class="line"></div><div class="line">biases = &#123;</div><div class="line">    <span class="string">'out'</span>: tf.Variable(tf.random_normal([<span class="number">10</span>]))&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow RNN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RNN神经网络介绍]]></title>
      <url>/2017/07/04/RNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<ul>
<li><p>概念：<br><br>  对时间序列上的变化进行建模的一种神经网络</p>
</li>
<li><p>优点：<br><br>  基于之前的运行结果或者时间点，进行当前的预测</p>
</li>
</ul>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><img src="https://ggg.9170.gs/20170705149918844048550.png" alt="20170705149918844048550.png"></p>
<p><img src="https://ggg.9170.gs/20170705149918852969168.png" alt="20170705149918852969168.png"></p>
<p><img src="https://ggg.9170.gs/20170705149918855656852.png" alt="20170705149918855656852.png"></p>
]]></content>
      
        <categories>
            
            <category> TensorFlow RNN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[卷积神经网络代码实现]]></title>
      <url>/2017/07/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ggg.9170.gs/hexo/img/jj-mb.png" alt="&quot;jj-md&quot;"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> tensorflow.examples.tutorials.mnist.input_data ad input_data</div><div class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#训练集的image</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</div><div class="line"><span class="comment">#训练集的label</span></div><div class="line">y_actual = tf.palceholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#定义一个函数，用于初始化所有权值 w</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></div><div class="line">	initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</div><div class="line">	<span class="keyword">return</span> tr.Variable(initial)</div><div class="line"></div><div class="line"><span class="comment">#定义一个函数，用于初始化所有的偏置值 b</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></div><div class="line">	initial = tf.constant(<span class="number">0.1</span>, shape=shape)</div><div class="line">	<span class="keyword">return</span> tf.Variable(initial)</div><div class="line"></div><div class="line"><span class="comment">#定义一个函数，用于构建卷积层</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, w)</span>:</span></div><div class="line">	<span class="keyword">return</span> tf.nn.conv2d(x, w,strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</div><div class="line">	</div><div class="line"><span class="comment">#定义一个函数，用于构建池化层</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool</span><span class="params">(x, w)</span>:</span></div><div class="line">	<span class="keyword">return</span> tr.nn.max_pool(x, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">'SAME'</span>)</div><div class="line"></div><div class="line">x_image = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">#构建网络</span></div><div class="line">w_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>])</div><div class="line">b_conv1 = bias_variable([<span class="number">32</span>])</div><div class="line"></div><div class="line">h_conv1 = tf.nn.relu(conv2d(x_image,w_conv1)+b_conv1)<span class="comment">#第一个卷积层</span></div><div class="line">h_pool1 = max_pool(h_conv1)<span class="comment">#第一个池化层</span></div><div class="line"></div><div class="line">w_conv2 = weight_variable([<span class="number">5</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">62</span>])</div><div class="line">b_conv2 = bias_variable([<span class="number">64</span>])</div><div class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,w_conv2)+b_conv2)<span class="comment">#第二个卷积层</span></div><div class="line">h_poopl2 = max_pool(h_conv2)<span class="comment">#第二个池化层</span></div><div class="line"></div><div class="line">w_fcl = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>])</div><div class="line">b_fcl = bias_variables([<span class="number">1024</span>])</div><div class="line">h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>]) <span class="comment">#reshape成向量</span></div><div class="line"></div><div class="line">keep_prob = tf.palceholder(<span class="string">"float"</span>)</div><div class="line">h_fcl_drop = tf.nn.dropout(h_fcl, keep_prob)<span class="comment">#dropout层</span></div><div class="line"></div><div class="line">w_fc2 = weight_variable([<span class="number">1024</span>, <span class="number">10</span>])</div><div class="line">b_fc2 = bias_variable([<span class="number">10</span>])</div><div class="line">y_predict = tf.nn.softmax(tf.matmul(h_fcl_drop, w_fc2) + b_fc2)<span class="comment">#softmax层</span></div><div class="line"></div><div class="line">croos_entropy = -tf.reduce_sum(y_actual * tf.log(y_predict)) <span class="comment">#交叉熵</span></div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">1e-3</span>).minimize(cross_entropy)<span class="comment">#梯度下降法</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y_predict, <span class="number">1</span>),tf.argmax(y_actual,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,<span class="string">'float'</span>))<span class="comment">#精度计算</span></div><div class="line"></div><div class="line">init = tf.initializer_all_variables()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">	sess.run(init)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2000</span>):</div><div class="line">		batch = mnist.train.next_batch(<span class="number">50</span>)</div><div class="line">		<span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">			train_acc =accuracy.eval(feed_dict=&#123;x: batch[<span class="number">0</span>],y_yctual: batch[<span class="number">1</span>],keep_prob:<span class="number">1.0</span>&#125;)</div><div class="line">			<span class="keyword">print</span> <span class="string">"step"</span>,i,<span class="string">"training accuracy"</span>,train_acc</div><div class="line">		train_step.run(feed_dic=&#123;x:batch[<span class="number">0</span>],y_actual:batch[<span class="number">1</span>],keep_prob;<span class="number">0.5</span>&#125;)</div><div class="line">	test_acc = accuracy.eval(feed_dict=&#123;x;mnist.test.images, y_actual:mnist,test,labels, keep_prob:<span class="number">1.0</span>&#125;)</div><div class="line">	<span class="keyword">print</span> <span class="string">"test accuracy"</span>,test_acc</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[卷积神经网络（CNN)]]></title>
      <url>/2017/07/03/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%88CNN/</url>
      <content type="html"><![CDATA[<h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><ul>
<li>优点：<br><br>CNN可以得出原始图像的有效表征，通过<font color="red">极少的预处理</font>，识别视觉上的规律。</li>
<li>适用领域：<br><br>  语音识别、图像识别</li>
<li>结构分类：<br><br>  特征提取层、特征映射层</li>
</ul>
<p><img src="https://ggg.9170.gs/hexo/img/jjsjwljg.png" alt="&quot;jjsjwl&quot;"><br><img src="https://ggg.9170.gs/jj-jjc.png" alt="&quot;jjc&quot;"><br><img src="https://ggg.9170.gs/hexo/img/jj-jhhs.png" alt="&quot;jhhs&quot;"><br><img src="https://ggg.9170.gs/jj-ch.png" alt="&quot;ch&quot;"><br><img src="https://ggg.9170.gs/hexo/img/jj-clj.png" alt="&quot;clj&quot;"></p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow逻辑回归代码实现]]></title>
      <url>/2017/07/03/TensorFlow%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>##TensorFlow逻辑回归代码实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment">#导入数据集</span></div><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line">mnist = input_data.read_data_sets(<span class="string">"data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment">#变量</span></div><div class="line">batch_size = <span class="number">100</span></div><div class="line"></div><div class="line"><span class="comment">#训练的x(image),y(label)</span></div><div class="line"><span class="comment"># x = tf.Variable() 不使用于大量数据</span></div><div class="line"><span class="comment"># y = tf.Variable() 不使用于大量数据</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</div><div class="line">y = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</div><div class="line"></div><div class="line"><span class="comment">#模型权重</span></div><div class="line"><span class="comment">#[55000, 784]* w = [55000, 10]</span></div><div class="line">w = tf.Variable(tf.zeros([<span class="number">784</span>, <span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line"></div><div class="line"><span class="comment">#用softmax构建逻辑回归模型</span></div><div class="line">pred = tf.nn.softmax(tf.matmul(x,w) + b)</div><div class="line"><span class="comment">#损失函数（交叉熵）</span></div><div class="line">cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred),<span class="number">1</span>))</div><div class="line"><span class="comment"># 梯度下降</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>).minimize(cost)</div><div class="line"></div><div class="line"><span class="comment">#初始变量</span></div><div class="line">init = tf.initialize_all_variables()</div><div class="line"><span class="comment">#加载session图</span></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line"></div><div class="line">    <span class="comment">#开始训练</span></div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">50</span>):</div><div class="line">        avg_cost = <span class="number">0</span></div><div class="line"></div><div class="line">        total_batch= int(mnist.train.num_examples/batch_size)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_batch):</div><div class="line">            batch_xs, batch_ys = mnist.train.next_batch(batch_size)</div><div class="line">            sess.run(optimizer,&#123;x: batch_xs,y: batch_ys&#125;)</div><div class="line">            <span class="comment">#计算平均损失</span></div><div class="line">            avg_cost += sess.run(cost,&#123;x:batch_xs,y:batch_ys&#125;) / total_batch</div><div class="line">        <span class="keyword">if</span> (epoch+<span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">"avg_cost"</span>,avg_cost</div><div class="line">    <span class="keyword">print</span> <span class="string">"运行完成"</span></div><div class="line"></div><div class="line">    <span class="comment">#测试准确率</span></div><div class="line">    correct = tf.equal(tf.argmax(pred, <span class="number">1</span>),tf.argmax(y, <span class="number">1</span>))</div><div class="line">    accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))</div><div class="line">    <span class="keyword">print</span> <span class="string">"正确率"</span>,accuracy.eval(&#123;x: mnist.test.images,y: mnist.test.labels&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow逻辑回归语法]]></title>
      <url>/2017/07/03/TensorFlow%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="https://ggg.9170.gs/hexo/img/softmax.png" alt="&quot;softmax&quot;"></p>
<h3 id="语法部分"><a href="#语法部分" class="headerlink" title="语法部分"></a>语法部分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#占位符，适用于不知道具体参数</span></div><div class="line">x = tf.placeholder(tf.float32, shape=(<span class="number">4</span>, <span class="number">4</span>))</div><div class="line">y = tf.add(x, x)</div><div class="line"></div><div class="line">argmax_paramter = tf.Variable([[<span class="number">1</span>, <span class="number">32</span>, <span class="number">44</span>, <span class="number">56</span>],[<span class="number">89</span>, <span class="number">12</span>, <span class="number">90</span>, <span class="number">33</span>],[<span class="number">35</span>, <span class="number">69</span>,<span class="number">1</span>,<span class="number">10</span>]])</div><div class="line"></div><div class="line"><span class="comment">#最大列索引</span></div><div class="line">argmax_0 = tf.argmax(argmax_paramter, <span class="number">0</span>)</div><div class="line"><span class="comment">#最大行索引</span></div><div class="line">argmax_1 = tf.argmax(argmax_paramter, <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#平均数</span></div><div class="line">reduce_0 = tf.reduce_mean(argmax_paramter, reduction_indices=<span class="number">0</span>)</div><div class="line">reduce_1 = tf.reduce_mean(argmax_paramter, raduction_indices=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">#相等</span></div><div class="line">equal_0 = tf.equal(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">equal_1 = tf.equal(<span class="number">2</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment">#类型转换</span></div><div class="line">cast_0 = tf.cast(equal_0, tf.int32)</div><div class="line">casr_1 = tf.cast(equal_1,tf.float32)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">	init = tf.variables_all_initializer()</div><div class="line">	sess.run(init)</div><div class="line">	</div><div class="line">	rand_array = np.random.rand(<span class="number">4</span>, <span class="number">4</span>)</div><div class="line">	print(sess.run(y, feed_dict=&#123;x: rand_array&#125;))</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线性回归使用到的TensorFlow语法]]></title>
      <url>/2017/07/03/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84TensorFlow%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>##基础语法部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment">#-----------准备阶段-----------</span></div><div class="line">a = tf.Variable([[<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">b = tf.Variable([[<span class="number">4</span>],[<span class="number">2</span>]])</div><div class="line">c = tf.matmul(a,b)</div><div class="line"></div><div class="line">print(<span class="string">'c-------&gt;'</span>,c)</div><div class="line"></div><div class="line"><span class="comment">#创建用0填充的矩阵</span></div><div class="line">d = tf.zeros([<span class="number">2</span>,<span class="number">4</span>])</div><div class="line"><span class="comment">#平方</span></div><div class="line">e = tf.square([<span class="number">2</span>])</div><div class="line"><span class="comment">#平均值</span></div><div class="line">f = tf.reduce_mean([<span class="number">1</span>,<span class="number">3</span>])</div><div class="line"><span class="comment">#均匀分布的随机数</span></div><div class="line">q = tf.random_uniform([<span class="number">1</span>,<span class="number">10</span>])</div><div class="line"><span class="comment">#------------执行阶段-----------</span></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">	<span class="comment">#初始所有的变量</span></div><div class="line">	init = tf.global_variables_initializer()</div><div class="line">	sess.run(init)</div></pre></td></tr></table></figure>
<p>##代码实现部分</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="comment"># 一元的线性回归模型的训练</span></div><div class="line"><span class="comment"># 1.通过训练数据推测出线性回归函数（y = w * x + b）中的w 和 b的值</span></div><div class="line"><span class="comment"># 2.通过验证数据，验证得到的函数是否符合预期</span></div><div class="line"></div><div class="line"><span class="comment">#引入tensorflow</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment">#引入绘图标</span></div><div class="line"></div><div class="line"><span class="comment">#引入数据模块</span></div><div class="line"><span class="keyword">import</span> testData <span class="keyword">as</span> td</div><div class="line"></div><div class="line"><span class="comment"># 1.获得训练数据</span></div><div class="line"><span class="comment"># testData</span></div><div class="line"><span class="comment"># get_train_data 获得训练数据，参数data_length(获得数据的个数)返回：二维数组[0]代表x [1]代表y</span></div><div class="line"><span class="comment"># get_validata_data 获得验证数据 参数：data_length(数据个数) 返回二维数组 二维数组[0]代表x [1]代表y</span></div><div class="line"></div><div class="line">trainData = td.get_train_data(<span class="number">200</span>)</div><div class="line">trainx = [v[<span class="number">0</span>] <span class="keyword">for</span> v <span class="keyword">in</span> trainData]</div><div class="line">trainy = [v[<span class="number">1</span>] <span class="keyword">for</span> v <span class="keyword">in</span> trainData]</div><div class="line"></div><div class="line"><span class="comment">#2.构造预测的线性回归函数 y = w * x +b</span></div><div class="line">w = tf.Variable(tf.random_uniform([<span class="number">1</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">1</span>]))</div><div class="line">y = w * trainx + b</div><div class="line"></div><div class="line"><span class="comment">#3.判断假设函数的好坏</span></div><div class="line"><span class="comment"># 代价函数</span></div><div class="line"></div><div class="line">cost = tf.reduce_mean(tf.square(y-trainy))</div><div class="line"></div><div class="line"><span class="comment">#4.调整假设函数</span></div><div class="line"><span class="comment">#梯度下降算法找最优解</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.08</span>)</div><div class="line">train = optimizer.minimize(cost)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    <span class="comment">#--------初始化所有变量值--------</span></div><div class="line">    init = tf.initialize_all_variables() <span class="comment">#replaced initialize_all_variables with global_variables_initializer</span></div><div class="line">    sess.run(init)</div><div class="line">    <span class="comment">#初始化w.b的值</span></div><div class="line">    print(<span class="string">"cost="</span>,sess.run(cost),<span class="string">"w="</span>,sess.run(w),<span class="string">"b="</span>,sess.run(b))</div><div class="line">    <span class="comment">#循环运行</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">        sess.run(train)</div><div class="line">        <span class="comment">#输出训练好的w和b</span></div><div class="line">        print(<span class="string">"cost="</span>,sess.run(cost),<span class="string">"w="</span>,sess.run(w),<span class="string">"b="</span>,sess.run(b))</div><div class="line">    print(<span class="string">"执行完成"</span>)</div><div class="line"></div><div class="line">    <span class="comment">#构造图形结构</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow 一元线性回归]]></title>
      <url>/2017/07/03/TensorFlow%20%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      <content type="html"><![CDATA[<h2 id="TensorFlow实现一元线性回归模型"><a href="#TensorFlow实现一元线性回归模型" class="headerlink" title="TensorFlow实现一元线性回归模型"></a>TensorFlow实现一元线性回归模型</h2><p>(x y)<br><br>&nbsp;1 3<br><br>&nbsp;1 5.1<br><br>&nbsp;1 6.99<br></p>
<blockquote>
<p>y = w * x + b;</p>
</blockquote>
<h3 id="1-假设一个线性回归模型"><a href="#1-假设一个线性回归模型" class="headerlink" title="1.假设一个线性回归模型"></a>1.假设一个线性回归模型</h3><blockquote>
<p>h(x) = 3 * x + 5;</p>
</blockquote>
<h3 id="2-判断这个假设线性回归模型对不对"><a href="#2-判断这个假设线性回归模型对不对" class="headerlink" title="2.判断这个假设线性回归模型对不对"></a>2.判断这个假设线性回归模型对不对</h3><blockquote>
<p>3 * 1 + 5 = 8</p>
</blockquote>
<p>代价函数：均方差<br>（（8 - 3）的平方 + (11 - 5.1)的平方+(14 - 6.99)的平方）/ 2*3</p>
<h3 id="3-判断这个模型参数"><a href="#3-判断这个模型参数" class="headerlink" title="3.判断这个模型参数"></a>3.判断这个模型参数</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">h(<span class="keyword">x</span>) = <span class="number">2.8</span> * <span class="keyword">x</span> + <span class="number">4</span><span class="comment">;</span></div><div class="line">h(<span class="keyword">x</span>) = <span class="number">2.6</span> * <span class="keyword">x</span> +<span class="number">3</span><span class="comment">;</span></div><div class="line">.</div><div class="line">.</div><div class="line">.</div><div class="line">h(<span class="keyword">x</span>) = <span class="number">2.0</span> * <span class="keyword">x</span> + <span class="number">1</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>求最优解算法：</p>
<p>梯度下降：</p>
<h3 id="4-得到符合要求的线性回归模型"><a href="#4-得到符合要求的线性回归模型" class="headerlink" title="4.得到符合要求的线性回归模型"></a>4.得到符合要求的线性回归模型</h3><p>h(x) = 2.0 * x + 1;</p>
<h3 id="5-用验证数据验证下训练出来的模型对不对"><a href="#5-用验证数据验证下训练出来的模型对不对" class="headerlink" title="5.用验证数据验证下训练出来的模型对不对"></a>5.用验证数据验证下训练出来的模型对不对</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.获得训练数据和验证数据（一堆（x，y）组成的训练点）</p>
<p>2.假设一个一元线性回归函数 （a = w*x +b）</p>
<p>3.判断假设函数的好坏 (代价函数)</p>
<p>4.调整假设的一元线性回归函数 (梯度下降算法 学习率)</p>
<p>5.得到最优的预测一元线性回归函数 (y = w*x +b)</p>
<p>6.根据验证数据验证函数是否符合要求</p>
]]></content>
      
        <categories>
            
            <category> TensorFlow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>/about.html</url>
      <content type="html"><![CDATA[<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p> <code>/tataki/</code></p>
<p><br><br>喜欢尝试新鲜事物</p>
<p>喜欢和有趣的人打交道</p>
<p>对二战历史有着浓厚兴趣</p>
<p>喜欢一些小众东西</p>
<p>游戏方面：</p>
<blockquote>
<ul>
<li>比如降智商的 OSU(欧屎)</li>
</ul>
</blockquote>
<p>生活方面：</p>
<blockquote>
<ul>
<li>玄学(论火电，水电，风电，核电对音质的影响)</li>
</ul>
</blockquote>
<h3 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h3><p>不喜欢一成不变的东西</p>
<p>不喜欢随波逐流</p>
<p>对Sony家的产品有特殊信仰</p>
<blockquote>
<h3 id="Make-Believe"><a href="#Make-Believe" class="headerlink" title="Make Believe"></a>Make Believe</h3></blockquote>
<p>对Google家的技术跪舔</p>
<blockquote>
<font color="gray" size="6"> 代码和网易云音乐是绝配</font>

</blockquote>
<h2 id="Find-me"><a href="#Find-me" class="headerlink" title="Find me?"></a>Find me?</h2><p><font size="4">QQ</font>:U2FsdGVkX19HY8ZQ9F3wzNDD/DxyoG2pIltnnWs66ng=</p>
<p><font size="4">Telegram</font>:Orange Tataki</p>
<p><font size="4">网易云音乐</font>:<a href="http://music.163.com/#/user/home?id=51335046" target="_blank" rel="external">KamioYuki</a></p>
<p><font size="4">email</font>:orangeyao@outlook.com</p>
<p><font size="4">QQ群</font>:531672842</p>
<p><font size="4">G猫加速</font>:<a href="https://www.ggg.moe" target="_blank" rel="external">Link</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>/about/about.html</url>
      <content type="html"><![CDATA[<h2 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h2><p> <code>/tataki/</code></p>
<p><br><br>喜欢尝试新鲜事物</p>
<p>喜欢和有趣的人打交道</p>
<p>对二战历史有着浓厚兴趣</p>
<p>喜欢一些小众东西</p>
<p>游戏方面：</p>
<blockquote>
<ul>
<li>比如降智商的 OSU(欧屎)</li>
</ul>
</blockquote>
<p>生活方面：</p>
<blockquote>
<ul>
<li>玄学(论火电，水电，风电，核电对音质的影响)</li>
</ul>
</blockquote>
<h3 id="Also"><a href="#Also" class="headerlink" title="Also"></a>Also</h3><p>不喜欢一成不变的东西</p>
<p>不喜欢随波逐流</p>
<p>对Sony家的产品有特殊信仰</p>
<blockquote>
<h3 id="Make-Believe"><a href="#Make-Believe" class="headerlink" title="Make Believe"></a>Make Believe</h3></blockquote>
<p>对Google家的技术跪舔</p>
<blockquote>
<font color="gray" size="6"> 代码和网易云音乐是绝配</font>

</blockquote>
<h2 id="Find-me"><a href="#Find-me" class="headerlink" title="Find me?"></a>Find me?</h2><p><font size="4">QQ</font>:U2FsdGVkX19HY8ZQ9F3wzNDD/DxyoG2pIltnnWs66ng=</p>
<p><font size="4">Telegram</font>:Orange Tataki</p>
<p><font size="4">网易云音乐</font>:<a href="http://music.163.com/#/user/home?id=51335046" target="_blank" rel="external">KamioYuki</a></p>
<p><font size="4">email</font>:orangeyao@outlook.com</p>
<p><font size="4">QQ群</font>:531672842</p>
<p><font size="4">G猫加速</font>:<a href="https://www.ggg.moe" target="_blank" rel="external">Link</a></p>
]]></content>
    </entry>
    
  
</search>
